library("bigrquery")
library(DBI)
library(RSQLite)
db_name <- file.path('/Users/tylerfischer/Documents/violent-protests','events.sqlite')
db_conn <- dbConnect(SQLite(), db_name)
local_data <- dbReadTable(db_conn, 'Events')
attach(local_data)
summary(local_data)
counts <- aggregate(local_data[4], list(EventCode), mean)
c(counts["Group.1"])[1]
c(counts$AvgTone)[2]
barplot(c(counts$AvgTone), names.arg=c(counts$Group.1))
nrow(local_data)
length(which(EventCode == 145 & (Actor1Name=="UNITED STATES" | Actor2Name=="UNITED STATES")))/length(which(Actor1Name=="UNITED STATES" | Actor2Name=="UNITED STATES")) * 100
nrow(local_data[ which(local_data$Actor1Name == "UNITED STATES" && local_data$EventCode == 145),])
length(which(EventCode == 145))/nrow(local_data) * 100
event_tone = data.frame(EventCode=EventCode, AvgTone=AvgTone)
local_data$EventCode <- as.factor(local_data$EventCode)
boxplot(AvgTone~EventCode,local_data)
sampled_data = local_data[sample(nrow(local_data), 5000), ]
root_events = data.frame(sampled_data[which(sampled_data$IsRootEvent == TRUE),])
non_root = sampled_data[which(sampled_data$IsRootEvent == FALSE),]
apply(root_events, 1, function(row){print(paste0(row))})
root_events$sequence<-NA
create_sequence <- function(row){
event_query = non_root[which(non_root$Actor1Name == row["Actor1Name"], non_root$Actor2Name == row["Actor2Name"]),]
# TODO
# Filter non_root events that happen more then 1.5 months from the root event
#SELECT DATEADD(day, -45, '2017/08/25') AS Past45;
#SELECT DATEADD(day, 45, '2017/08/25') AS Future45;
# Filter event root codes based on https://www.hindawi.com/journals/ddns/2017/8180272/tab1/se
if(!identical(event_query, character(0)) && length(event_query) != 0){
print(paste0(event_query$GLOBALEVENTID))
return(event_query$GLOBALEVENTID)
}
}
root_events$sequence = apply(root_events, 1, function(row){create_sequence(row)})
clear
head event_query
event_query = non_root[which(non_root$Actor1Name == row["Actor1Name"], non_root$Actor2Name == row["Actor2Name"]),]
head root_events$sequence
head(root_events$sequence)
summary(root_events$sequence)
root_events$sequence = apply(root_events, 1, function(row){create_sequence(row)})
my_packages = c("shiny", "leaflet", "plyr", "httr", "bigrquery", "countrycode", "ggplot2", "shinyWidgets", "DT", "scales")
install_if_missing = function(p) {
if (p %in% rownames(installed.packages()) == FALSE) {
install.packages(p)
}
}
invisible(sapply(my_packages, install_if_missing))
library(shiny)
library(leaflet)
library(plyr)
port <- Sys.getenv('PORT')
shiny::runApp(
appDir = getwd(),
host = '0.0.0.0',
port = as.numeric(port)
)
